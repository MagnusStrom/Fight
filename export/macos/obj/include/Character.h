// Generated by Haxe 4.1.5
#ifndef INCLUDED_Character
#define INCLUDED_Character

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS0(Character)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Character_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef Character_obj OBJ_;
		Character_obj();

	public:
		enum { _hx_ClassId = 0x55af02e5 };

		void __construct(::hx::Null< int >  __o_playernum,::hx::Null< bool >  __o_playable,::String __o_name,::String __o_path,::hx::Null< int >  __o_w,::hx::Null< int >  __o_h,::hx::Null< int >  __o_ox,::hx::Null< int >  __o_oy,::hx::Null< int >  __o_fwidth,::hx::Null< int >  __o_fheight);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Character")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"Character"); }
		static ::hx::ObjectPtr< Character_obj > __new(::hx::Null< int >  __o_playernum,::hx::Null< bool >  __o_playable,::String __o_name,::String __o_path,::hx::Null< int >  __o_w,::hx::Null< int >  __o_h,::hx::Null< int >  __o_ox,::hx::Null< int >  __o_oy,::hx::Null< int >  __o_fwidth,::hx::Null< int >  __o_fheight);
		static ::hx::ObjectPtr< Character_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< int >  __o_playernum,::hx::Null< bool >  __o_playable,::String __o_name,::String __o_path,::hx::Null< int >  __o_w,::hx::Null< int >  __o_h,::hx::Null< int >  __o_ox,::hx::Null< int >  __o_oy,::hx::Null< int >  __o_fwidth,::hx::Null< int >  __o_fheight);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Character_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Character",89,bb,a4,e3); }

		bool stunned;
		bool jumping;
		bool facingleft;
		bool attackleft;
		bool canplay;
		bool hitting;
		bool special;
		bool usingspecial;
		int offsetx;
		int offsety;
		bool canhit;
		bool canspecial;
		bool hitboxInUse;
		Float hitboxX;
		Float hitboxY;
		int hitboxColor;
		int hitboxVelocityX;
		int hitboxVelocityY;
		::String _hx_char;
		int pnum;
		::Array< ::String > charlist;
		::Array< Float > atkcooldown;
		::Array< Float > specialcooldown;
		void respawn();
		::Dynamic respawn_dyn();

		void update(Float elapsed);

};


#endif /* INCLUDED_Character */ 
